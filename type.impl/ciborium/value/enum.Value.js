(function() {var type_impls = {
"webc":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#impl-Clone-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#impl-Debug-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/de.rs.html#167\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/de.rs.html#169\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5B(Value,+Value)%5D%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3C%26%5B(Value,+Value)%5D%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;[(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)]&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;[(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)]) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[(Value, Value)]>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BValue%5D%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3C%26%5BValue%5D%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;[<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>]&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;[<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>]) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[Value]>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5Bu8%5D%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3C%26%5Bu8%5D%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[u8]>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3C%26str%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCanonicalValue%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/canonical.rs.html#83\">source</a><a href=\"#impl-From%3CCanonicalValue%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"ciborium/value/canonical/struct.CanonicalValue.html\" title=\"struct ciborium::value::canonical::CanonicalValue\">CanonicalValue</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/canonical.rs.html#84\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"ciborium/value/canonical/struct.CanonicalValue.html\" title=\"struct ciborium::value::canonical::CanonicalValue\">CanonicalValue</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CanonicalValue>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CInteger%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3CInteger%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"ciborium/value/integer/struct.Integer.html\" title=\"struct ciborium::value::integer::Integer\">Integer</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"ciborium/value/integer/struct.Integer.html\" title=\"struct ciborium::value::integer::Integer\">Integer</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Integer>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3CString%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<String>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3C(Value,+Value)%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3CVec%3C(Value,+Value)%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<(Value, Value)>>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CValue%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3CVec%3CValue%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<Value>>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3Cu8%3E%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3CVec%3Cu8%3E%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<u8>>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cbool%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<bool>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#678\">source</a><a href=\"#impl-From%3Cchar%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.char.html\">char</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#680\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<char>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cf32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cf32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<f32>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cf64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cf64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<f64>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci128%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#657\">source</a><a href=\"#impl-From%3Ci128%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i128.html\">i128</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#659\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i128>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Ci16%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i16>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Ci32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i32>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Ci64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i64>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Ci8%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i8>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu128%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#641\">source</a><a href=\"#impl-From%3Cu128%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u128.html\">u128</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#643\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u128>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cu16%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u16>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cu32%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u32>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cu64%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#impl-From%3Cu8%3E-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#612-639\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u8>","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#impl-PartialEq-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#impl-PartialOrd-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1179\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1197\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1214\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1232\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/ser.rs.html#9\">source</a><a href=\"#impl-Serialize-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ciborium/value/ser.rs.html#11\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/de.rs.html#614\">source</a><a href=\"#impl-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialized\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/de.rs.html#617\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.deserialized\" class=\"fn\">deserialized</a>&lt;'de, T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"ciborium/value/error/enum.Error.html\" title=\"enum ciborium::value::error::Error\">Error</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Deserializes the <code>Value</code> into an object</p>\n</div></details></div></details>",0,"webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#50\">source</a><a href=\"#impl-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_integer\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#60\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_integer\" class=\"fn\">is_integer</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is an <code>Integer</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Integer(<span class=\"number\">17</span>.into());\n\n<span class=\"macro\">assert!</span>(value.is_integer());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_integer\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#75\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_integer\" class=\"fn\">as_integer</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"ciborium/value/integer/struct.Integer.html\" title=\"struct ciborium::value::integer::Integer\">Integer</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Integer</code>, returns a reference to the associated <code>Integer</code> data.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Integer(<span class=\"number\">17</span>.into());\n\n<span class=\"comment\">// We can read the number\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">17</span>, value.as_integer().unwrap().try_into().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#94\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_integer\" class=\"fn\">into_integer</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"ciborium/value/integer/struct.Integer.html\" title=\"struct ciborium::value::integer::Integer\">Integer</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Integer</code>, returns a the associated <code>Integer</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Integer(<span class=\"number\">17</span>.into());\n<span class=\"macro\">assert_eq!</span>(value.into_integer(), <span class=\"prelude-val\">Ok</span>(Integer::from(<span class=\"number\">17</span>)));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_integer(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#110\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_bytes\" class=\"fn\">is_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a <code>Bytes</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>]);\n\n<span class=\"macro\">assert!</span>(value.is_bytes());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#124\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Bytes</code>, returns a reference to the associated bytes vector.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>]);\n\n<span class=\"macro\">assert_eq!</span>(std::str::from_utf8(value.as_bytes().unwrap()).unwrap(), <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#142\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Bytes</code>, returns a mutable reference to the associated bytes vector.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>]);\nvalue.as_bytes_mut().unwrap().clear();\n\n<span class=\"macro\">assert_eq!</span>(value, Value::Bytes(<span class=\"macro\">vec!</span>[]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#161\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_bytes\" class=\"fn\">into_bytes</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>&gt;, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Bytes</code>, returns a the associated <code>Vec&lt;u8&gt;</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>]);\n<span class=\"macro\">assert_eq!</span>(value.into_bytes(), <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>]));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_bytes(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_float\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#177\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_float\" class=\"fn\">is_float</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a <code>Float</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Float(<span class=\"number\">17.0</span>.into());\n\n<span class=\"macro\">assert!</span>(value.is_float());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_float\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#192\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_float\" class=\"fn\">as_float</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Float</code>, returns a reference to the associated float data.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Float(<span class=\"number\">17.0</span>.into());\n\n<span class=\"comment\">// We can read the float number\n</span><span class=\"macro\">assert_eq!</span>(value.as_float().unwrap(), <span class=\"number\">17.0_f64</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_float\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#211\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_float\" class=\"fn\">into_float</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.f64.html\">f64</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Float</code>, returns a the associated <code>f64</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Float(<span class=\"number\">17.</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_float(), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">17.</span>));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_float(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_text\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#227\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_text\" class=\"fn\">is_text</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a <code>Text</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Text(String::from(<span class=\"string\">\"hello\"</span>));\n\n<span class=\"macro\">assert!</span>(value.is_text());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_text\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#242\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_text\" class=\"fn\">as_text</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Text</code>, returns a reference to the associated <code>String</code> data.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Text(String::from(<span class=\"string\">\"hello\"</span>));\n\n<span class=\"comment\">// We can read the String\n</span><span class=\"macro\">assert_eq!</span>(value.as_text().unwrap(), <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_text_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#260\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_text_mut\" class=\"fn\">as_text_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Text</code>, returns a mutable reference to the associated <code>String</code> data.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Text(String::from(<span class=\"string\">\"hello\"</span>));\nvalue.as_text_mut().unwrap().clear();\n\n<span class=\"macro\">assert_eq!</span>(value.as_text().unwrap(), <span class=\"kw-2\">&amp;</span>String::from(<span class=\"string\">\"\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_text\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#279\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_text\" class=\"fn\">into_text</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>String</code>, returns a the associated <code>String</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Text(String::from(<span class=\"string\">\"hello\"</span>));\n<span class=\"macro\">assert_eq!</span>(value.into_text().as_deref(), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_text(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_bool\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#295\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_bool\" class=\"fn\">is_bool</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a <code>Bool</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert!</span>(value.is_bool());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bool\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#309\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_bool\" class=\"fn\">as_bool</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Bool</code>, returns a copy of the associated boolean value. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>(value.as_bool().unwrap(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bool\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#328\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_bool\" class=\"fn\">into_bool</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Bool</code>, returns a the associated <code>bool</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_bool(), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">false</span>));\n\n<span class=\"kw\">let </span>value = Value::Float(<span class=\"number\">17.</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_bool(), <span class=\"prelude-val\">Err</span>(Value::Float(<span class=\"number\">17.</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_null\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#344\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_null\" class=\"fn\">is_null</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a <code>Null</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Null;\n\n<span class=\"macro\">assert!</span>(value.is_null());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_tag\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#357\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_tag\" class=\"fn\">is_tag</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a <code>Tag</code>. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Tag(<span class=\"number\">61</span>, Box::from(Value::Null));\n\n<span class=\"macro\">assert!</span>(value.is_tag());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_tag\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#373\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_tag\" class=\"fn\">as_tag</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u64.html\">u64</a>, &amp;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Tag</code>, returns the associated tag value and a reference to the tag <code>Value</code>.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Tag(<span class=\"number\">61</span>, Box::from(Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>])));\n\n<span class=\"kw\">let </span>(tag, data) = value.as_tag().unwrap();\n<span class=\"macro\">assert_eq!</span>(tag, <span class=\"number\">61</span>);\n<span class=\"macro\">assert_eq!</span>(data, <span class=\"kw-2\">&amp;</span>Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_tag_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#393\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_tag_mut\" class=\"fn\">as_tag_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u64.html\">u64</a>, &amp;mut <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Tag</code>, returns the associated tag value and a mutable reference\nto the tag <code>Value</code>. Returns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Tag(<span class=\"number\">61</span>, Box::from(Value::Bytes(<span class=\"macro\">vec!</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>])));\n\n<span class=\"kw\">let </span>(tag, <span class=\"kw-2\">mut </span>data) = value.as_tag_mut().unwrap();\ndata.as_bytes_mut().unwrap().clear();\n<span class=\"macro\">assert_eq!</span>(tag, <span class=\"kw-2\">&amp;</span><span class=\"number\">61</span>);\n<span class=\"macro\">assert_eq!</span>(data, <span class=\"kw-2\">&amp;</span>Value::Bytes(<span class=\"macro\">vec!</span>[]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_tag\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#412\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_tag\" class=\"fn\">into_tag</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;), <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Tag</code>, returns a the associated pair of <code>u64</code> and <code>Box&lt;value&gt;</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Tag(<span class=\"number\">7</span>, Box::new(Value::Float(<span class=\"number\">12.</span>)));\n<span class=\"macro\">assert_eq!</span>(value.into_tag(), <span class=\"prelude-val\">Ok</span>((<span class=\"number\">7</span>, Box::new(Value::Float(<span class=\"number\">12.</span>)))));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_tag(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_array\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#433\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_array\" class=\"fn\">is_array</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is an Array. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Array(\n    <span class=\"macro\">vec!</span>[\n        Value::Text(String::from(<span class=\"string\">\"foo\"</span>)),\n        Value::Text(String::from(<span class=\"string\">\"bar\"</span>))\n    ]\n);\n\n<span class=\"macro\">assert!</span>(value.is_array());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#453\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_array\" class=\"fn\">as_array</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an Array, returns a reference to the associated vector. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Array(\n    <span class=\"macro\">vec!</span>[\n        Value::Text(String::from(<span class=\"string\">\"foo\"</span>)),\n        Value::Text(String::from(<span class=\"string\">\"bar\"</span>))\n    ]\n);\n\n<span class=\"comment\">// The length of `value` is 2 elements.\n</span><span class=\"macro\">assert_eq!</span>(value.as_array().unwrap().len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_array_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#476\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_array_mut\" class=\"fn\">as_array_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is an Array, returns a mutable reference to the associated vector.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Array(\n    <span class=\"macro\">vec!</span>[\n        Value::Text(String::from(<span class=\"string\">\"foo\"</span>)),\n        Value::Text(String::from(<span class=\"string\">\"bar\"</span>))\n    ]\n);\n\nvalue.as_array_mut().unwrap().clear();\n<span class=\"macro\">assert_eq!</span>(value, Value::Array(<span class=\"macro\">vec!</span>[]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_array\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#500\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_array\" class=\"fn\">into_array</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Array</code>, returns a the associated <code>Vec&lt;Value&gt;</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Array(\n    <span class=\"macro\">vec!</span>[\n        Value::Integer(<span class=\"number\">17</span>.into()),\n        Value::Float(<span class=\"number\">18.</span>),\n    ]\n);\n<span class=\"macro\">assert_eq!</span>(value.into_array(), <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">vec!</span>[Value::Integer(<span class=\"number\">17</span>.into()), Value::Float(<span class=\"number\">18.</span>)]));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_array(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_map\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#520\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.is_map\" class=\"fn\">is_map</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the <code>Value</code> is a Map. Returns false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Map(\n    <span class=\"macro\">vec!</span>[\n        (Value::Text(String::from(<span class=\"string\">\"foo\"</span>)), Value::Text(String::from(<span class=\"string\">\"bar\"</span>)))\n    ]\n);\n\n<span class=\"macro\">assert!</span>(value.is_map());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_map\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#545\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_map\" class=\"fn\">as_map</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a Map, returns a reference to the associated Map data. Returns None\notherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = Value::Map(\n    <span class=\"macro\">vec!</span>[\n        (Value::Text(String::from(<span class=\"string\">\"foo\"</span>)), Value::Text(String::from(<span class=\"string\">\"bar\"</span>)))\n    ]\n);\n\n<span class=\"comment\">// The length of data is 1 entry (1 key/value pair).\n</span><span class=\"macro\">assert_eq!</span>(value.as_map().unwrap().len(), <span class=\"number\">1</span>);\n\n<span class=\"comment\">// The content of the first element is what we expect\n</span><span class=\"macro\">assert_eq!</span>(\n    value.as_map().unwrap().get(<span class=\"number\">0</span>).unwrap(),\n    <span class=\"kw-2\">&amp;</span>(Value::Text(String::from(<span class=\"string\">\"foo\"</span>)), Value::Text(String::from(<span class=\"string\">\"bar\"</span>)))\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_map_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#568\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.as_map_mut\" class=\"fn\">as_map_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a Map, returns a mutable reference to the associated Map Data.\nReturns None otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Map(\n    <span class=\"macro\">vec!</span>[\n        (Value::Text(String::from(<span class=\"string\">\"foo\"</span>)), Value::Text(String::from(<span class=\"string\">\"bar\"</span>)))\n    ]\n);\n\nvalue.as_map_mut().unwrap().clear();\n<span class=\"macro\">assert_eq!</span>(value, Value::Map(<span class=\"macro\">vec!</span>[]));\n<span class=\"macro\">assert_eq!</span>(value.as_map().unwrap().len(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_map\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#591\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.into_map\" class=\"fn\">into_map</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>)&gt;, <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the <code>Value</code> is a <code>Map</code>, returns a the associated <code>Vec&lt;(Value, Value)&gt;</code> data as <code>Ok</code>.\nReturns <code>Err(Self)</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = Value::Map(\n    <span class=\"macro\">vec!</span>[\n        (Value::Text(String::from(<span class=\"string\">\"key\"</span>)), Value::Float(<span class=\"number\">18.</span>)),\n    ]\n);\n<span class=\"macro\">assert_eq!</span>(value.into_map(), <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">vec!</span>[(Value::Text(String::from(<span class=\"string\">\"key\"</span>)), Value::Float(<span class=\"number\">18.</span>))]));\n\n<span class=\"kw\">let </span>value = Value::Bool(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(value.into_map(), <span class=\"prelude-val\">Err</span>(Value::Bool(<span class=\"bool-val\">true</span>)));</code></pre></div>\n</div></details></div></details>",0,"webc::metadata::Annotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/ser.rs.html#432\">source</a><a href=\"#impl-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialized\" class=\"method\"><a class=\"src rightside\" href=\"src/ciborium/value/ser.rs.html#435\">source</a><h4 class=\"code-header\">pub fn <a href=\"ciborium/value/enum.Value.html#tymethod.serialized\" class=\"fn\">serialized</a>&lt;T&gt;(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a>, <a class=\"enum\" href=\"ciborium/value/error/enum.Error.html\" title=\"enum ciborium::value::error::Error\">Error</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Serializes an object into a <code>Value</code></p>\n</div></details></div></details>",0,"webc::metadata::Annotation"],["<section id=\"impl-StructuralPartialEq-for-Value\" class=\"impl\"><a class=\"src rightside\" href=\"src/ciborium/value/mod.rs.html#20\">source</a><a href=\"#impl-StructuralPartialEq-for-Value\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"ciborium/value/enum.Value.html\" title=\"enum ciborium::value::Value\">Value</a></h3></section>","StructuralPartialEq","webc::metadata::Annotation"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()