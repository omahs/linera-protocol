searchState.loadedDescShard("rustix", 1, "Allow MAC configuration or state changes. The base kernel …\nOverride MAC access. The base kernel enforces no MAC …\n<code>CAP_MAC_ADMIN</code>\n<code>CAP_MAC_OVERRIDE</code>\n<code>CAP_MKNOD</code>\nMount name space.\nAllow the privileged aspects of <code>mknod</code>.\n<code>CLOCK_MONOTONIC</code>\n<code>CLOCK_MONOTONIC_COARSE</code>\n<code>CLOCK_MONOTONIC_RAW</code>\nMount name space.\nNetwork name space.\n<code>CAP_NET_ADMIN</code>\n<code>CAP_NET_BIND_SERVICE</code>\n<code>CAP_NET_BROADCAST</code>\n<code>CAP_NET_RAW</code>\n<code>CLONE_NEWCGROUP</code>.\n<code>CLONE_NEWIPC</code>.\n<code>CLONE_NEWNET</code>.\n<code>CLONE_NEWNS</code>.\n<code>CLONE_NEWPID</code>.\n<code>CLONE_NEWTIME</code>.\n<code>CLONE_NEWUSER</code>.\n<code>CLONE_NEWUTS</code>\nSetting this flag disallows raising ambient capabilities …\nSet <code>NO_CAP_AMBIENT_RAISE</code> irreversibly.\nIf this bit is set, then the kernel does not grant …\nSet <code>NO_ROOT</code> irreversibly.\nSetting this flag stops the kernel from adjusting the …\nSet <code>NO_SETUID_FIXUP</code> irreversibly.\nA return type for <code>nanosleep</code> and <code>clock_nanosleep_relative</code>.\nAllow interface configuration. Allow administration of IP …\nAllows binding to TCP/UDP sockets below 1024. Allows …\nAllow broadcasting, listen to multicast.\nAllow use of <code>RAW</code> sockets. Allow use of <code>PACKET</code> sockets. …\nNetwork name space.\nThe sleep completed normally.\n<code>CAP_PERFMON</code>\nProcess ID name space.\nAllow system performance and observability privileged …\n<code>pid_t</code>—A non-zero Unix process ID.\n<code>CLOCK_PROCESS_CPUTIME_ID</code>\nOperation will be performed for all processes in the …\nProcess ID name space.\nA group identifier as a raw integer.\nA process identifier as a raw integer.\nA user identifier as a raw integer.\n<code>CLOCK_REALTIME</code>\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_COARSE</code>\n<code>FUTEX_REQUEUE</code>\n<code>CAP_SETFCAP</code>\n<code>CAP_SETGID</code>\n<code>CAP_SETPCAP</code>\n<code>CAP_SETUID</code>\nScalable Vector Extension vector length configuration.\n<code>CAP_SYSLOG</code>\n<code>CLONE_SYSVSEM</code>.\n<code>CAP_SYS_ADMIN</code>\n<code>CAP_SYS_BOOT</code>\n<code>CAP_SYS_CHROOT</code>\n<code>CAP_SYS_MODULE</code>\n<code>CAP_SYS_NICE</code>\n<code>CAP_SYS_PACCT</code>\n<code>CAP_SYS_PTRACE</code>\n<code>CAP_SYS_RAWIO</code>\n<code>CAP_SYS_RESOURCE</code>\n<code>CAP_SYS_TIME</code>\n<code>CAP_SYS_TTY_CONFIG</code>\n<code>SECCOMP_MODE_*</code>.\nSet or remove capabilities on files. Map <code>uid=0</code> into a …\nAllows <code>setgid</code> manipulation. Allows <code>setgroups</code>. Allows …\nWithout VFS support for capabilities:\nAllows <code>set*uid</code> manipulation (including fsuid). Allows …\nUse hard-coded filter.\nValue of the fast switch flag controlling system calls …\nAllow configuration of the secure attention key. Allow …\nAllow use of <code>reboot</code>.\nAllow use of <code>chroot</code>.\nAllow configuring the kernel’s <code>syslog</code> (<code>printk</code> behaviour).\nInsert and remove kernel modules - modify kernel without …\nAllow raising priority and setting priority on other …\nAllow configuration of process accounting.\nAllow <code>ptrace</code> of any process.\nAllow ioperm/iopl access. Allow sending USB messages to …\nOverride resource limits. Set resource limits. Override …\nAllow configuration of tty devices. Allow <code>vhangup</code> of tty.\nAllow manipulation of system clock. Allow <code>irix_stime</code> on …\nAsynchronous tag check fault mode.\nSynchronous tag check fault mode.\nTime name space.\nZero means addresses that are passed for the purpose of …\nOperation will be performed for the thread.\n<code>CLOCK_THREAD_CPUTIME_ID</code>\nOperation will be performed for all tasks in the task …\nThread name space type.\nTime name space.\n<code>struct timespec</code>\n<code>FUTEX_TRYLOCK_PI</code>\nUser name space.\n<code>uid_t</code>—A Unix user ID.\n<code>FUTEX_UNLOCK_PI</code>\n<code>CLONE_*</code> for use with <code>unshare</code>.\nUser name space.\n<code>CAP_WAKE_ALARM</code>\n<code>FUTEX_WAIT</code>\n<code>FUTEX_WAIT_BITSET</code>\n<code>FUTEX_WAKE</code>\nAllow triggering something that will wake the system.\n<code>FUTEX_WAKE_OP</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>capget(_LINUX_CAPABILITY_VERSION_3, pid)</code>\nGet the <code>securebits</code> flags of the calling thread.\nCheck if the specified capability is in the ambient set.\nCheck if the specified capability is in the calling thread…\nRemove all capabilities from the ambient set.\n<code>clock_nanosleep(id, TIMER_ABSTIME, request, NULL)</code>—Sleeps …\n<code>clock_nanosleep(id, 0, request, remain)</code>—Sleeps for a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdd or remove the specified capability to the ambient set.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nGet core scheduling cookie of a process.\nCreate unique core scheduling cookie.\nGet the current tagged address mode for the calling thread.\nGet the <code>current</code> timer slack value of the calling thread.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable Syscall User Dispatch mechanism.\nSet the state of the <code>THP disable</code> flag for the calling …\n<code>__user_cap_data_struct.effective</code>\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable Syscall User Dispatch mechanism.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nLinux <code>futex</code>.\nDEPRECATED: There are now individual functions available …\nGet the <code>clear_child_tid</code> address set by <code>set_tid_address</code> and …\nGet the current state of the calling thread’s …\n<code>gettid()</code>—Returns the thread ID.\n<code>__user_cap_data_struct.inheritable</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReassociate the calling thread with the namespace …\nAtomically move the calling thread into one or more of the …\nGet the name of the calling thread.\n<code>nanosleep(request, remain)</code>—Sleeps for a duration.\nGet the value of the <code>no_new_privs</code> attribute for the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>__user_cap_data_struct.permitted</code>\nPull core scheduling cookie from a process.\nPush core scheduling cookie to a process.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIf the calling thread has the …\nSecurely reset the thread’s pointer authentication keys …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n…\nSet the <code>securebits</code> flags of the calling thread.\nControls support for passing tagged user-space addresses …\nSets the <code>current</code> timer slack value for the calling thread.\nSet the state of the calling thread’s <code>keep capabilities</code> …\nSet the name of the calling thread.\nSet the calling thread’s <code>no_new_privs</code> attribute.\nSet the secure computing mode for the calling thread, to …\nConfigure the thread’s vector length of Scalable Vector …\n<code>setgid(gid)</code>\n<code>setgroups(groups)</code>-Sets the supplementary group IDs for the …\n<code>setresgid(rgid, egid, sgid)</code>\n<code>setresuid(ruid, euid, suid)</code>\n<code>setuid(uid)</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet the thread’s current SVE vector length configuration.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the current setting of the <code>THP disable</code> flag for the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>unshare(flags)</code>—Disassociate parts of the current thread…\nVector length in bytes.\nVector length inherited across <code>execve</code>.\n<code>FUTEX_OP_ADD</code>: <code>uaddr2 += oparg;</code>\n<code>FUTEX_OP_ADD | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 += (oparg &lt;&lt; 1);</code>\n<code>FUTEX_OP_ANDN</code>: <code>uaddr2 &amp;= ~oparg;</code>\n<code>FUTEX_OP_ANDN | FUTEX_OP_ARG_SHIFT</code>: …\n<code>FUTEX_CLOCK_REALTIME</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval == cmparg { wake(); }</code>\n<code>FUTEX_*</code> flags for use with the functions in <code>futex</code>.\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &gt;= cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &gt; cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &lt;= cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &lt; cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval != cmparg { wake(); }</code>\n<code>FUTEX_OWNER_DIED</code>\n<code>FUTEX_OP_OR</code>: <code>uaddr2 |= oparg;</code>\n<code>FUTEX_OP_OR | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 |= (oparg &lt;&lt; 1);</code>\n<code>FUTEX_PRIVATE_FLAG</code>\n<code>FUTEX_OP_SET</code>: <code>uaddr2 = oparg;</code>\n<code>FUTEX_OP_SET | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 = (oparg &lt;&lt; 1);</code>\n<code>struct timespec</code>\n<code>FUTEX_WAITERS</code>\n<code>FUTEX_OP_*</code> operations for use with <code>wake_op</code>.\n<code>FUTEX_OP_CMP_*</code> operations for use with <code>wake_op</code>.\n<code>FUTEX_OP_XOR</code>: <code>uaddr2 ^= oparg;</code>\n<code>FUTEX_OP_XOR | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 ^= (oparg &lt;&lt; 1);</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to …\nEquivalent to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nEquivalent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nEquivalent to …\nEquivalent to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nEquivalent to …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\n<code>TFD_TIMER_ABSTIME</code>\n<code>CLOCK_BOOTTIME</code>—Like <code>Monotonic</code>, but advances while …\n<code>CLOCK_BOOTTIME</code>\n<code>CLOCK_BOOTTIME</code>\n<code>CLOCK_BOOTTIME_ALARM</code>—Like <code>Boottime</code>, but wakes a …\n<code>CLOCK_BOOTTIME_ALARM</code>\n<code>CLOCK_BOOTTIME_ALARM</code>\n<code>TFD_TIMER_CANCEL_ON_SET</code>\n<code>TFD_CLOEXEC</code>\n<code>clockid_t</code> <code>CLOCK_*</code> constants for use with <code>clock_gettime</code>.\nLinux dynamic clocks.\n<code>clockid_t</code> <code>CLOCK_*</code> constants for use with …\n<code>struct itimerspec</code> for use with <code>timerfd_gettime</code> and …\n<code>ClockId</code> values that are always supported at runtime.\n<code>CLOCK_MONOTONIC</code>—A clock that tells an abstract time.\n<code>CLOCK_MONOTONIC</code>\n<code>CLOCK_MONOTONIC_COARSE</code>\n<code>CLOCK_MONOTONIC_RAW</code>\n<code>TFD_NONBLOCK</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>CLOCK_PROCESS_CPUTIME_ID</code>\n<code>CLOCK_REALTIME</code>—A clock that tells the “real” time.\n<code>CLOCK_REALTIME</code>\n<code>CLOCK_REALTIME_ALARM</code>—Like <code>Realtime</code>, but wakes a …\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_COARSE</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>CLOCK_TAI</code>, available on Linux ≥ 3.10\n<code>CLOCK_THREAD_CPUTIME_ID</code>\n<code>CLOCK_*</code> constants for use with <code>timerfd_create</code>.\n<code>TFD_*</code> flags for use with <code>timerfd_create</code>.\n<code>TFD_TIMER_*</code> flags for use with <code>timerfd_settime</code>.\n<code>struct timespec</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>clock_getres(id)</code>—Returns the resolution of a clock.\n<code>clock_gettime(id)</code>—Returns the current value of a clock.\nLike <code>clock_gettime</code> but with support for dynamic clocks.\n<code>clock_settime(id, timespec)</code>—Sets the current value of a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>timerfd_create(clockid, flags)</code>—Create a timer.\n<code>timerfd_gettime(clockid, flags)</code>—Query a timer.\n<code>timerfd_settime(clockid, flags, new_value)</code>—Set the time …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.")