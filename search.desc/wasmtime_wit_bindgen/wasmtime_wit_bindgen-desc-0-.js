searchState.loadedDescShard("wasmtime_wit_bindgen", 0, "All generated functions should be <code>async</code>.\nAll imports may trap.\nThese imported functions should not be async, but …\nWhich imports should be generated as async functions.\nGenerated types used as parameters to guest exports will …\nNo functions are <code>async</code>.\nNo imports are allowed to trap.\nOnly the specified set of functions may trap.\nThese functions are the only imports that are async, all …\nGenerated types will be composed entirely of owning …\nAdditional derive attributes to add to generated types. If …\nWhether or not to use async rust functions and traits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not to generate code for only the interfaces of …\nWhether to generate owning or borrowing type definitions.\nIndicates that the <code>T</code> in <code>Store&lt;T&gt;</code> should be send even if …\nThe name, in Rust, of the error type to generate.\nWhether or not <code>rustfmt</code> is executed to format generated …\nTemporary option to skip <code>impl&lt;T: Trait&gt; Trait for &amp;mut T</code> …\nEvaluate to a string literal containing the generated code …\nWhether or not to emit <code>tracing</code> macro calls on function …\nA list of “trappable errors” which are used to replace …\nConfiguration of which imports are allowed to generate a …\nWhether or not <code>tracing</code> macro calls should included …\nPath to the <code>wasmtime</code> crate if it’s not the default path.\nFull path to the error, such as <code>wasi:io/streams/error</code>.\nRemapping of interface names to rust module names. TODO: …\nWhether or not to generate “duplicate” type …")