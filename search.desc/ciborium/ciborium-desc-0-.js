searchState.loadedDescShard("ciborium", 0, "Welcome to Ciborium!\nAn array\nA boolean\nBytes\nA float\nAn integer\nA map\nNull\nTag\nA string\nA representation of a dynamic CBOR value that can handled …\nBuild a <code>Value</code> conveniently.\nSerde deserialization support for CBOR\nDeserializes the <code>Value</code> into an object\nReturns the argument unchanged.\nDeserializes as CBOR from a type with …\nDeserializes as CBOR from a type with …\nCalls <code>U::from(self)</code>.\nSerializes as CBOR into a type with <code>impl ciborium_io::Write</code>\nSerde serialization support for CBOR\nSerializes an object into a <code>Value</code>\nContains helper types for dealing with CBOR tags\nA dynamic CBOR value\nAn error occurred during deserialization\nAn error occurred while reading bytes\nThe input caused serde to recurse too much\nAn error occurred while processing a parsed value\nAn error occurred while parsing bytes\nReturns the argument unchanged.\nDeserializes as CBOR from a type with …\nDeserializes as CBOR from a type with …\nDeserializes as CBOR from a type with …\nCalls <code>U::from(self)</code>.\nA helper method for composing a semantic error\nAn error occurred during serialization\nAn error occurred while writing bytes\nAn error indicating a value that cannot be serialized\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerializes as CBOR into a type with <code>impl ciborium_io::Write</code>\nAn optional CBOR tag\nAn optional CBOR tag and its data item\nA required CBOR tag\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn array\nA boolean\nBytes\nA CBOR Value that impl Ord and Eq to allow sorting of …\nA custom error string produced by serde\nThe error when serializing to/from a <code>Value</code>\nA float\nAn abstract integer value\nAn integer\nA map\nNull\nTag\nA string\nA representation of a dynamic CBOR value that can handled …\nIf the <code>Value</code> is an Array, returns a reference to the …\nIf the <code>Value</code> is an Array, returns a mutable reference to …\nIf the <code>Value</code> is a <code>Bool</code>, returns a copy of the associated …\nIf the <code>Value</code> is a <code>Bytes</code>, returns a reference to the …\nIf the <code>Value</code> is a <code>Bytes</code>, returns a mutable reference to …\nIf the <code>Value</code> is a <code>Float</code>, returns a reference to the …\nIf the <code>Value</code> is a <code>Integer</code>, returns a reference to the …\nIf the <code>Value</code> is a Map, returns a reference to the …\nIf the <code>Value</code> is a Map, returns a mutable reference to the …\nIf the <code>Value</code> is a <code>Tag</code>, returns the associated tag value …\nIf the <code>Value</code> is a <code>Tag</code>, returns the associated tag value …\nIf the <code>Value</code> is a <code>Text</code>, returns a reference to the …\nIf the <code>Value</code> is a <code>Text</code>, returns a mutable reference to the …\nCompare two integers as if we were to serialize them, but …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the <code>Value</code> is a <code>Array</code>, returns a the associated …\nIf the <code>Value</code> is a <code>Bool</code>, returns a the associated <code>bool</code> data …\nIf the <code>Value</code> is a <code>Bytes</code>, returns a the associated <code>Vec&lt;u8&gt;</code> …\nIf the <code>Value</code> is a <code>Float</code>, returns a the associated <code>f64</code> data …\nIf the <code>Value</code> is a <code>Integer</code>, returns a the associated <code>Integer</code>…\nIf the <code>Value</code> is a <code>Map</code>, returns a the associated …\nIf the <code>Value</code> is a <code>Tag</code>, returns a the associated pair of <code>u64</code>…\nIf the <code>Value</code> is a <code>String</code>, returns a the associated <code>String</code> …\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a <code>Bool</code>. Returns false …\nReturns true if the <code>Value</code> is a <code>Bytes</code>. Returns false …\nReturns true if the <code>Value</code> is a <code>Float</code>. Returns false …\nReturns true if the <code>Value</code> is an <code>Integer</code>. Returns false …\nReturns true if the <code>Value</code> is a Map. Returns false …\nReturns true if the <code>Value</code> is a <code>Null</code>. Returns false …\nReturns true if the <code>Value</code> is a <code>Tag</code>. Returns false …\nReturns true if the <code>Value</code> is a <code>Text</code>. Returns false …")