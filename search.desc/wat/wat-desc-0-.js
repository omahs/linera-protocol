searchState.loadedDescShard("wat", 0, "A Rust parser for the WebAssembly Text format\nResult of <code>Detect::from_bytes</code> to indicate what some input …\nContains the error value\nErrors from this crate related to parsing WAT files\nGenerate full debugging information for both line numbers …\nConfiguration of how DWARF debugging information may be …\nOnly generate line tables to map binary offsets back to …\nContains the success value\nParser configuration for transforming bytes into …\nA convenience type definition for <code>Result</code> where the error …\nThe input bytes don’t look like WebAssembly at all.\nThe input bytes look like the WebAssembly binary format.\nThe input bytes look like the WebAssembly text format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetect quickly if supplied bytes represent a Wasm module, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this is either binary or textual wasm.\nCreates a new parser with th default settings.\nParses in-memory bytes as either the WebAssembly Text …\nEquivalent of <code>parse_bytes</code> but uses this parser’s …\nParses a file on disk as a WebAssembly Text format file, …\nEquivalent of <code>parse_file</code> but uses this parser’s settings.\nParses an in-memory string as the WebAssembly Text format, …\nEquivalent of <code>parse_str</code> but uses this parser’s settings.\nTo provide a more useful error this function can be used …")