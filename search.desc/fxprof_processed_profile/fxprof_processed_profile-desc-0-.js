searchState.loadedDescShard("fxprof_processed_profile", 0, "This crate allows you to create a profile that can be …\ne.g. “Label: 5.55mb, 5 bytes, 312.5kb”\nOne of the available colors for a category.\nA profiling category, can be set on stack frames and …\nA profiling category pair, consisting of a category and an …\nA counter. Can be created with <code>Profile::add_counter</code>.\nThe amount of CPU time between thread samples.\nFor time data that represents a duration of time. e.g. “…\nDynamic fields have a per-marker value. The ProfilerMarker …\nA file path, supports PII sanitization.\nA part of the information about a single stack frame.\nFlags for a stack frame.\nAll the information about a single stack frame.\nSet on frames which are JavaScript functions.\nSet on frames which are not strictly JavaScript functions …\nInstant markers describe a single point in time.\nA code address taken from the instruction pointer.\nInterval markers describe a time interval with a start and …\nA marker for just the end of an actual marker. Can be …\nA marker for just the start of an actual marker. Can be …\nA string, containing an index returned by …\nKeeps track of mapped libraries in an address space. …\nThe handle for a library, obtained from <code>Profile::add_lib</code>.\nA library (“binary” / “module” / “DSO”) which …\nThe name of the marker type.\nThe field description of a marker field which can have a …\nThe field format of a marker field.\nThe location of markers with this type.\nDescribes a marker type.\nThe description of a marker field in the marker type’s …\nThe field description of a marker field which has the same …\nSpecifies timestamps for a marker.\nThe “Other” category. All profiles have this category.\nThis should be a value between 0 and 1. “Label: 50%”\nA process. Can be created with <code>Profile::add_process</code>.\nStores the profile data and can be serialized as JSON, via …\nThe trait that all markers implement.\nA timestamp which anchors the profile in absolute time.\nA relative address taken from the instruction pointer which\nA relative address taken from a return address which has …\nA code address taken from a return address\nThe sampling interval used during profile recording.\nThe following are alternatives to display a time only in a …\nTODO - This is not supported yet.\nStatic fields have the same value on all markers. This is …\nA plain String, never sanitized for PII. Important: Do not …\nA handle for an interned string, returned from …\nA single symbol from a <code>SymbolTable</code>.\nA symbol table which contains a list of <code>Symbol</code>s, used in …\nA thread. Can be created with <code>Profile::add_thread</code>.\nData that happened at a specific time, relative to the …\nThis adds markers to the FileIO timeline area in the …\nThis adds markers to the IPC timeline area in the header.\nIn the timeline, this is a section that breaks out markers …\nThis adds markers to the main marker timeline in the …\nThe type used for sample and marker timestamps.\nA URL, supports PII sanitization\nA CPU delta of zero.\nAdd a category and return its handle.\nCreate a counter. Counters let you make graphs with a time …\nAdd a data point to a counter. For a memory counter, …\nAdd a kernel library mapping. This allows symbolication of …\nGet the <code>LibraryHandle</code> for a library. This handle is used …\nFor a given process, define where in the virtual memory of …\nAdd a mapping to this address space. Any existing mappings …\nAdd a marker to the given thread.\nAdd a marker to the given thread, with a stack.\nAdd an empty process. The name, pid and start time can be …\nAdd a sample to the given thread.\nAdd a sample with a CPU delta of zero. Internally, …\nAdd a subcategory for a category, and return the “…\nAdd an empty thread to the specified process.\nThe symbol’s address, as a “relative address”, i.e. …\nGet a flags value with all known bits set.\nAn optional string with the CPU arch of this library, for …\nConvert the interval to float seconds.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe category pair of this frame.\nClear all mappings.\nClear all library mappings in the specified process.\nThe code ID of the library. This lets symbolication …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nConverts an absolute address (AVMA, actual virtual memory …\nThe debug ID of the library. This lets symbolication …\nThe debug name of this library which should be used when …\nThe absolute path to the debug file. On Linux and macOS …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe marker fields. These can be specified on each marker.\nThe flags of this frame. Use <code>FrameFlags::empty()</code> if unsure.\nThe format of this field.\nThe absolute address or label of this frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreate a reference timestamp from a <code>Duration</code> since the …\nCreate a sampling interval from a sampling frequency in Hz.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreate a CPU delta from integer microseconds.\nCreate a CPU delta from float milliseconds.\nCreate a sampling interval from a value in milliseconds.\nCreate a reference timestamp from milliseconds since the …\nGet a flags value with the bits of a flag with the given …\nCreate a CPU delta from integer nanoseconds.\nCreate a sampling interval from a value in nanoseconds\nCreate a reference timestamp from a <code>SystemTime</code>.\nGet the string for a string handle. This is sometimes …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTurn the string into in a <code>StringHandle</code>, for use in …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether the CPU delta is zero.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nA method that streams the marker payload data as a …\nThe field key.\nThe user-visible label of this field.\nList of marker display locations. Empty for …\nLook up the symbol for an address. This address is …\nThe name of this library that should be displayed in the …\nThe symbol name.\nConvert the interval to nanoseconds.\nCreates a new empty instance.\nCreate a <code>SymbolTable</code> from a list of <code>Symbol</code>s.\nCreate a new profile.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe absolute path to the binary file.\nThe intersection of a source flags value with the …\nMark the kernel library at the specified start address as …\nMark the library mapping at the specified start address in …\nRemove a mapping which starts at the given address. If …\nA static method that returns a <code>MarkerSchema</code>, which …\nWhether this field’s value should be matched against …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChange the declared sampling interval.\nSet the symbol table for a library.\nSet the end time of a process.\nChange the name of a process.\nChange the start time of a process.\nChange the product name.\nChange the reference timestamp.\nSet the end time of a thread.\nChange the name of a thread.\nChange the start time of a thread.\nThe symbol’s size, if known. This is often just set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAn optional symbol table, for “pre-symbolicating” …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe name of this marker type.\nThe bitwise or (<code>|</code>) of the bits in two flags values.")